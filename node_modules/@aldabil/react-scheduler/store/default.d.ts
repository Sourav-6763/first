import { SchedulerProps } from "../types";
export declare const defaultProps: (props: Partial<SchedulerProps>) => {
    height: number;
    navigation: boolean;
    disableViewNavigator: boolean;
    events: never[] & import("../types").ProcessedEvent[];
    fields: never[] & import("../types").FieldProps[];
    loading: undefined;
    customEditor: undefined;
    onConfirm: undefined;
    onDelete: undefined;
    viewerExtraComponent: undefined;
    resources: never[] & import("../types").DefaultRecourse[];
    resourceHeaderComponent: undefined;
    resourceViewMode: "default" | "vertical" | "tabs";
    direction: "ltr" | "rtl";
    dialogMaxWidth: "md" | "xs" | "sm" | "lg" | "xl";
    locale: import("date-fns/locale").Locale;
    deletable: boolean;
    editable: boolean;
    hourFormat: "12" | "24";
    draggable: boolean;
    agenda: boolean | undefined;
    enableAgenda: boolean;
    alwaysShowAgendaDays?: boolean | undefined;
    navigationPickerProps?: Partial<Omit<import("@mui/x-date-pickers").DateCalendarProps<Date>, "onClose" | "open" | "onChange" | "openTo" | "views" | "value" | "readOnly">> | undefined;
    eventRenderer?: ((props: import("../types").EventRendererProps) => JSX.Element | null) | undefined;
    getRemoteEvents?: ((params: import("../types").RemoteQuery) => Promise<void | import("../types").ProcessedEvent[]>) | undefined;
    loadingComponent?: JSX.Element | undefined;
    customViewer?: ((event: import("../types").ProcessedEvent, close: () => void) => JSX.Element) | undefined;
    viewerTitleComponent?: ((event: import("../types").ProcessedEvent) => JSX.Element) | undefined;
    disableViewer?: boolean | undefined;
    timeZone?: string | undefined;
    onEventDrop?: ((event: import("react").DragEvent<HTMLButtonElement>, droppedOn: Date, updatedEvent: import("../types").ProcessedEvent, originalEvent: import("../types").ProcessedEvent) => Promise<void | import("../types").ProcessedEvent>) | undefined;
    onEventClick?: ((event: import("../types").ProcessedEvent) => void) | undefined;
    onEventEdit?: ((event: import("../types").ProcessedEvent) => void) | undefined;
    onSelectedDateChange?: ((date: Date) => void) | undefined;
    onViewChange?: ((view: import("../components/nav/Navigation").View, agenda?: boolean | undefined) => void) | undefined;
    stickyNavigation?: boolean | undefined;
    onClickMore?: ((date: Date, gotToDay: (date: Date) => void) => void) | undefined;
    onCellClick?: ((start: Date, end: Date, resourceKey?: string | undefined, resourceVal?: string | number | undefined) => void) | undefined;
    translations: {
        moreEvents: string;
        loading: string;
        noDataToDisplay: string;
        validation?: {
            required?: string | undefined;
            invalidEmail?: string | undefined;
            onlyNumbers?: string | undefined;
            min?: string | ((min: number) => string) | undefined;
            max?: string | ((max: number) => string) | undefined;
        } | undefined;
        navigation: {
            month: string;
            week: string;
            day: string;
            agenda: string;
            today: string;
        } & Record<import("../components/nav/Navigation").View, string> & {
            today: string;
            agenda: string;
        };
        form: {
            addTitle: string;
            editTitle: string;
            confirm: string;
            delete: string;
            cancel: string;
        } & {
            addTitle: string;
            editTitle: string;
            confirm: string;
            delete: string;
            cancel: string;
        };
        event: {
            title: string;
            start: string;
            end: string;
            allDay: string;
        } & Record<string, string> & {
            title: string;
            start: string;
            end: string;
            allDay: string;
        };
    };
    resourceFields: {
        idField: string;
        textField: string;
        subTextField: string;
        avatarField: string;
        colorField: string;
    } & {
        idField: string;
        textField: string;
        subTextField?: string | undefined;
        avatarField?: string | undefined;
        colorField?: string | undefined;
    } & Record<string, string>;
    view: import("../components/nav/Navigation").View;
    selectedDate: Date;
    month: ({
        weekDays: number[];
        weekStartOn: number;
        startHour: number;
        endHour: number;
        navigation: boolean;
        disableGoToDay: boolean;
    } & import("../views/Month").MonthProps) | null;
    week: ({
        weekDays: number[];
        weekStartOn: number;
        startHour: number;
        endHour: number;
        step: number;
        navigation: boolean;
        disableGoToDay: boolean;
    } & import("../views/Week").WeekProps) | null;
    day: ({
        startHour: number;
        endHour: number;
        step: number;
        navigation: boolean;
    } & import("../views/Day").DayProps) | null;
};
export declare const initialStore: {
    setProps: () => void;
    dialog: boolean;
    selectedRange: undefined;
    selectedEvent: undefined;
    selectedResource: undefined;
    handleState: () => void;
    getViews: () => never[];
    toggleAgenda: () => void;
    triggerDialog: () => void;
    triggerLoading: () => void;
    handleGotoDay: () => void;
    confirmEvent: () => void;
    setCurrentDragged: () => void;
    onDrop: () => void;
    height: number;
    navigation: boolean;
    disableViewNavigator: boolean;
    events: never[] & import("../types").ProcessedEvent[];
    fields: never[] & import("../types").FieldProps[];
    loading: undefined;
    customEditor: undefined;
    onConfirm: undefined;
    onDelete: undefined;
    viewerExtraComponent: undefined;
    resources: never[] & import("../types").DefaultRecourse[];
    resourceHeaderComponent: undefined;
    resourceViewMode: "default" | "vertical" | "tabs";
    direction: "ltr" | "rtl";
    dialogMaxWidth: "md" | "xs" | "sm" | "lg" | "xl";
    locale: import("date-fns/locale").Locale;
    deletable: boolean;
    editable: boolean;
    hourFormat: "12" | "24";
    draggable: boolean;
    agenda: boolean | undefined;
    enableAgenda: boolean;
    alwaysShowAgendaDays?: boolean | undefined;
    navigationPickerProps?: Partial<Omit<import("@mui/x-date-pickers").DateCalendarProps<Date>, "onClose" | "open" | "onChange" | "openTo" | "views" | "value" | "readOnly">> | undefined;
    eventRenderer?: ((props: import("../types").EventRendererProps) => JSX.Element | null) | undefined;
    getRemoteEvents?: ((params: import("../types").RemoteQuery) => Promise<void | import("../types").ProcessedEvent[]>) | undefined;
    loadingComponent?: JSX.Element | undefined;
    customViewer?: ((event: import("../types").ProcessedEvent, close: () => void) => JSX.Element) | undefined;
    viewerTitleComponent?: ((event: import("../types").ProcessedEvent) => JSX.Element) | undefined;
    disableViewer?: boolean | undefined;
    timeZone?: string | undefined;
    onEventDrop?: ((event: import("react").DragEvent<HTMLButtonElement>, droppedOn: Date, updatedEvent: import("../types").ProcessedEvent, originalEvent: import("../types").ProcessedEvent) => Promise<void | import("../types").ProcessedEvent>) | undefined;
    onEventClick?: ((event: import("../types").ProcessedEvent) => void) | undefined;
    onEventEdit?: ((event: import("../types").ProcessedEvent) => void) | undefined;
    onSelectedDateChange?: ((date: Date) => void) | undefined;
    onViewChange?: ((view: import("../components/nav/Navigation").View, agenda?: boolean | undefined) => void) | undefined;
    stickyNavigation?: boolean | undefined;
    onClickMore?: ((date: Date, gotToDay: (date: Date) => void) => void) | undefined;
    onCellClick?: ((start: Date, end: Date, resourceKey?: string | undefined, resourceVal?: string | number | undefined) => void) | undefined;
    translations: {
        moreEvents: string;
        loading: string;
        noDataToDisplay: string;
        validation?: {
            required?: string | undefined;
            invalidEmail?: string | undefined;
            onlyNumbers?: string | undefined;
            min?: string | ((min: number) => string) | undefined;
            max?: string | ((max: number) => string) | undefined;
        } | undefined;
        navigation: {
            month: string;
            week: string;
            day: string;
            agenda: string;
            today: string;
        } & Record<import("../components/nav/Navigation").View, string> & {
            today: string;
            agenda: string;
        };
        form: {
            addTitle: string;
            editTitle: string;
            confirm: string;
            delete: string;
            cancel: string;
        } & {
            addTitle: string;
            editTitle: string;
            confirm: string;
            delete: string;
            cancel: string;
        };
        event: {
            title: string;
            start: string;
            end: string;
            allDay: string;
        } & Record<string, string> & {
            title: string;
            start: string;
            end: string;
            allDay: string;
        };
    };
    resourceFields: {
        idField: string;
        textField: string;
        subTextField: string;
        avatarField: string;
        colorField: string;
    } & {
        idField: string;
        textField: string;
        subTextField?: string | undefined;
        avatarField?: string | undefined;
        colorField?: string | undefined;
    } & Record<string, string>;
    view: import("../components/nav/Navigation").View;
    selectedDate: Date;
    month: ({
        weekDays: number[];
        weekStartOn: number;
        startHour: number;
        endHour: number;
        navigation: boolean;
        disableGoToDay: boolean;
    } & import("../views/Month").MonthProps) | null;
    week: ({
        weekDays: number[];
        weekStartOn: number;
        startHour: number;
        endHour: number;
        step: number;
        navigation: boolean;
        disableGoToDay: boolean;
    } & import("../views/Week").WeekProps) | null;
    day: ({
        startHour: number;
        endHour: number;
        step: number;
        navigation: boolean;
    } & import("../views/Day").DayProps) | null;
};
